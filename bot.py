import os
import telebot
import requests
import threading
import time
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
forwarded_messages = []
group_messages = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n + OpenAI
def ask_openai(prompt):
    try:
        response = requests.post(
            "https://n8n-lat.solowey.ru/webhook/c15cba7e-615e-4494-ba01-decf742c8c7c",
            json={"prompt": prompt},
            timeout=20
        )
        return response.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç n8n: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫—É
@bot.message_handler(func=lambda msg: msg.chat.type == "private" and msg.text)
def handle_forward(msg):
    sender = msg.forward_sender_name or \
             (msg.forward_from_chat.title if msg.forward_from_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
    forwarded_messages.append({"text": msg.text, "sender": sender})

    if len(forwarded_messages) >= 3:
        text = "\n\n".join([f"{m['sender']}: {m['text']}" for m in forwarded_messages[-30:]])
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥:

1. –û–±—â–∏–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è.
2. –°—Ç–∏–ª—å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø–æ –∏–º–µ–Ω–∏).
3. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å.
4. –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑.
5. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?

–î–∏–∞–ª–æ–≥:
{text}
"""
        reply = ask_openai(prompt)
        bot.reply_to(msg, f"üß† –ê–Ω–∞–ª–∏–∑:\n\n{reply}")
        forwarded_messages.clear()

# –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
@bot.message_handler(func=lambda msg: msg.chat.type in ['group', 'supergroup'] and msg.text)
def collect_group(msg):
    if msg.chat.id not in group_messages:
        group_messages[msg.chat.id] = []
    group_messages[msg.chat.id].append({
        "sender": msg.from_user.first_name or "–ê–Ω–æ–Ω–∏–º",
        "text": msg.text
    })

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
@bot.message_handler(commands=['analyze'])
def analyze_chat(msg):
    chat_id = msg.chat.id
    messages = group_messages.get(chat_id, [])
    if not messages:
        bot.reply_to(msg, "‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    text = "\n\n".join([f"{m['sender']}: {m['text']}" for m in messages[-30:]])
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —á–∞—Ç:

1. –û–±—â–∏–π —Ç–æ–Ω.
2. –ö—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–µ–Ω, –∫—Ç–æ –Ω–µ—Ç.
3. –ë—ã–ª–∏ –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
4. –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑.
5. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?

–î–∏–∞–ª–æ–≥:
{text}
"""
    reply = ask_openai(prompt)
    bot.send_message(chat_id, f"üìä –ê–Ω–∞–ª–∏–∑:\n\n{reply}")
    group_messages[chat_id] = []

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–æ—Ç—á—ë—Ç –≤ 23:59
def daily_report():
    while True:
        now = datetime.now()
        if now.hour == 23 and now.minute == 59:
            for chat_id, messages in group_messages.items():
                if not messages:
                    continue
                text = "\n\n".join([f"{m['sender']}: {m['text']}" for m in messages[-30:]])
                prompt = f"""
–°–¥–µ–ª–∞–π –∏—Ç–æ–≥ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å:

- –û–±—â–∏–π —Ç–æ–Ω
- –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ö—Ç–æ –∫–∞–∫ –æ–±—â–∞–ª—Å—è
- –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å

–î–∏–∞–ª–æ–≥:
{text}
"""
                reply = ask_openai(prompt)
                bot.send_message(chat_id, f"üåô –ò—Ç–æ–≥ –¥–Ω—è:\n\n{reply}")
                group_messages[chat_id] = []
            time.sleep(60)
        else:
            time.sleep(20)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
threading.Thread(target=daily_report, daemon=True).start()
bot.infinity_polling()
